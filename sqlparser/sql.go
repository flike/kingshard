// Code generated by goyacc -o ./sqlparser/sql.go ./sqlparser/sql.y. DO NOT EDIT.

//line ./sqlparser/sql.y:20
package sqlparser

import __yyfmt__ "fmt"

//line ./sqlparser/sql.y:20

import "bytes"

func SetParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func SetAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func ForceEOF(yylex interface{}) {
	yylex.(*Tokenizer).ForceEOF = true
}

var (
	SHARE        = []byte("share")
	MODE         = []byte("mode")
	IF_BYTES     = []byte("if")
	VALUES_BYTES = []byte("values")
)

//line ./sqlparser/sql.y:45
type yySymType struct {
	yys         int
	empty       struct{}
	statement   Statement
	selStmt     SelectStatement
	byt         byte
	bytes       []byte
	bytes2      [][]byte
	str         string
	selectExprs SelectExprs
	selectExpr  SelectExpr
	columns     Columns
	colName     *ColName
	tableExprs  TableExprs
	tableExpr   TableExpr
	smTableExpr SimpleTableExpr
	tableName   *TableName
	indexHints  *IndexHints
	expr        Expr
	boolExpr    BoolExpr
	valExpr     ValExpr
	tuple       Tuple
	valExprs    ValExprs
	values      Values
	subquery    *Subquery
	caseExpr    *CaseExpr
	whens       []*When
	when        *When
	orderBy     OrderBy
	order       *Order
	limit       *Limit
	insRows     InsertRows
	updateExprs UpdateExprs
	updateExpr  *UpdateExpr
}

const LEX_ERROR = 57346
const SELECT = 57347
const INSERT = 57348
const UPDATE = 57349
const DELETE = 57350
const FROM = 57351
const WHERE = 57352
const GROUP = 57353
const HAVING = 57354
const ORDER = 57355
const BY = 57356
const LIMIT = 57357
const FOR = 57358
const ALL = 57359
const DISTINCT = 57360
const AS = 57361
const EXISTS = 57362
const NULL = 57363
const ASC = 57364
const DESC = 57365
const VALUES = 57366
const INTO = 57367
const DUPLICATE = 57368
const KEY = 57369
const DEFAULT = 57370
const SET = 57371
const LOCK = 57372
const ID = 57373
const STRING = 57374
const NUMBER = 57375
const VALUE_ARG = 57376
const COMMENT = 57377
const UNION = 57378
const MINUS = 57379
const EXCEPT = 57380
const INTERSECT = 57381
const JOIN = 57382
const STRAIGHT_JOIN = 57383
const LEFT = 57384
const RIGHT = 57385
const INNER = 57386
const OUTER = 57387
const CROSS = 57388
const NATURAL = 57389
const USE = 57390
const FORCE = 57391
const ON = 57392
const OR = 57393
const AND = 57394
const NOT = 57395
const BETWEEN = 57396
const CASE = 57397
const WHEN = 57398
const THEN = 57399
const ELSE = 57400
const LE = 57401
const GE = 57402
const NE = 57403
const NULL_SAFE_EQUAL = 57404
const IS = 57405
const LIKE = 57406
const IN = 57407
const UNARY = 57408
const END = 57409
const BEGIN = 57410
const START = 57411
const TRANSACTION = 57412
const COMMIT = 57413
const ROLLBACK = 57414
const NAMES = 57415
const REPLACE = 57416
const ADMIN = 57417
const HELP = 57418
const OFFSET = 57419
const COLLATE = 57420
const CREATE = 57421
const ALTER = 57422
const DROP = 57423
const RENAME = 57424
const TABLE = 57425
const INDEX = 57426
const VIEW = 57427
const TO = 57428
const IGNORE = 57429
const IF = 57430
const UNIQUE = 57431
const USING = 57432
const TRUNCATE = 57433

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"NULL",
	"ASC",
	"DESC",
	"VALUES",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"ID",
	"STRING",
	"NUMBER",
	"VALUE_ARG",
	"COMMENT",
	"'('",
	"'~'",
	"UNION",
	"MINUS",
	"EXCEPT",
	"INTERSECT",
	"','",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"OR",
	"AND",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"IN",
	"'|'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"'.'",
	"UNARY",
	"END",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"NAMES",
	"REPLACE",
	"ADMIN",
	"HELP",
	"OFFSET",
	"COLLATE",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"USING",
	"TRUNCATE",
	"')'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 625

var yyAct = [...]int{

	111, 74, 389, 319, 102, 350, 185, 187, 120, 139,
	273, 231, 268, 108, 356, 188, 3, 97, 201, 109,
	92, 148, 60, 76, 37, 38, 39, 40, 98, 311,
	264, 213, 115, 119, 398, 63, 125, 162, 161, 398,
	114, 398, 88, 101, 116, 117, 118, 78, 106, 123,
	83, 156, 66, 85, 81, 156, 156, 89, 260, 53,
	77, 229, 52, 47, 53, 49, 219, 72, 105, 50,
	126, 338, 340, 282, 142, 103, 55, 56, 57, 367,
	366, 217, 132, 138, 220, 96, 121, 122, 99, 365,
	258, 146, 82, 261, 78, 141, 130, 62, 84, 400,
	54, 158, 79, 58, 399, 347, 397, 152, 150, 301,
	184, 186, 277, 189, 147, 124, 346, 190, 154, 262,
	310, 308, 339, 259, 195, 160, 228, 135, 94, 171,
	78, 200, 78, 198, 403, 269, 208, 314, 162, 161,
	205, 206, 134, 77, 349, 77, 210, 269, 216, 218,
	215, 199, 209, 137, 87, 203, 223, 61, 245, 75,
	237, 208, 161, 103, 235, 362, 239, 240, 224, 227,
	241, 244, 243, 246, 247, 351, 250, 251, 252, 253,
	254, 255, 256, 257, 242, 236, 290, 291, 292, 293,
	294, 278, 295, 296, 145, 266, 248, 238, 103, 103,
	172, 173, 174, 175, 176, 171, 19, 275, 332, 263,
	265, 276, 90, 333, 279, 174, 175, 176, 171, 272,
	270, 115, 119, 330, 280, 125, 78, 284, 331, 114,
	78, 249, 79, 116, 117, 118, 202, 106, 123, 77,
	150, 364, 235, 286, 131, 300, 283, 162, 161, 287,
	342, 303, 304, 19, 20, 21, 22, 105, 131, 126,
	363, 336, 51, 302, 335, 334, 260, 307, 288, 351,
	202, 103, 78, 317, 315, 121, 122, 23, 322, 373,
	313, 285, 309, 318, 127, 77, 150, 290, 291, 292,
	293, 294, 316, 295, 296, 383, 344, 235, 235, 34,
	328, 329, 131, 155, 124, 325, 71, 375, 376, 382,
	381, 133, 345, 170, 169, 172, 173, 174, 175, 176,
	171, 348, 353, 352, 19, 196, 194, 354, 357, 192,
	64, 28, 29, 358, 30, 31, 156, 32, 33, 191,
	93, 299, 24, 25, 27, 26, 37, 38, 39, 40,
	234, 368, 79, 298, 35, 233, 369, 170, 169, 172,
	173, 174, 175, 176, 171, 378, 343, 380, 205, 379,
	377, 169, 172, 173, 174, 175, 176, 171, 385, 386,
	357, 388, 390, 390, 390, 391, 392, 371, 387, 395,
	159, 234, 341, 271, 78, 401, 233, 115, 119, 404,
	93, 125, 64, 396, 405, 114, 406, 77, 101, 116,
	117, 118, 324, 106, 123, 323, 222, 170, 169, 172,
	173, 174, 175, 176, 171, 221, 129, 225, 115, 119,
	209, 62, 125, 105, 93, 126, 114, 372, 153, 79,
	116, 117, 118, 143, 106, 123, 140, 119, 136, 86,
	125, 121, 122, 99, 114, 384, 370, 79, 116, 117,
	118, 128, 133, 123, 105, 91, 126, 170, 169, 172,
	173, 174, 175, 176, 171, 305, 306, 211, 144, 207,
	124, 69, 121, 122, 126, 19, 19, 67, 204, 320,
	361, 321, 170, 169, 172, 173, 174, 175, 176, 171,
	121, 122, 119, 274, 149, 125, 360, 327, 202, 114,
	73, 124, 79, 116, 117, 118, 402, 133, 123, 393,
	119, 19, 42, 125, 18, 17, 16, 114, 41, 124,
	79, 116, 117, 118, 15, 133, 123, 14, 13, 126,
	170, 169, 172, 173, 174, 175, 176, 171, 12, 43,
	44, 45, 46, 95, 212, 121, 122, 126, 48, 281,
	214, 59, 80, 151, 65, 394, 374, 355, 359, 326,
	312, 197, 267, 121, 122, 113, 110, 112, 226, 107,
	163, 104, 337, 232, 124, 289, 230, 100, 297, 157,
	193, 68, 36, 70, 11, 10, 9, 165, 167, 8,
	7, 6, 124, 177, 178, 179, 180, 181, 182, 183,
	168, 166, 164, 170, 169, 172, 173, 174, 175, 176,
	171, 5, 4, 2, 1,
}
var yyPact = [...]int{

	248, -1000, -1000, 308, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -35, -38, 2, -22, -1000, 18,
	-1000, -1000, -1000, 66, 299, -1000, 516, 470, -1000, -1000,
	-1000, 463, -1000, -43, 400, 501, 71, -49, -7, 299,
	-1000, 0, 299, -1000, 418, -61, 299, -61, -1000, 440,
	304, -1000, 48, -1000, -1000, -13, -1000, -1000, 377, -1000,
	249, 436, 397, 400, 202, 499, -1000, 80, -1000, 47,
	417, 97, 299, -1000, 415, -1000, -27, 412, 458, 141,
	299, 400, 480, 321, 407, 400, -1000, 294, -1000, -1000,
	371, 45, 193, 541, -1000, 408, 201, -1000, -1000, -1000,
	499, 303, 293, -1000, 290, 289, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 499, -1000, 400, 321,
	498, 321, 395, 481, 426, 399, -1000, 457, -74, -1000,
	53, -1000, 394, -1000, -1000, 385, -1000, 398, -1000, 275,
	308, 19, -1000, -1000, -1000, 360, 377, -1000, -1000, 299,
	121, 408, 408, 499, 275, 101, 499, 499, 175, 499,
	499, 499, 499, 499, 499, 499, 499, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 541, -17, 16, -14, 541,
	-1000, 12, 377, -1000, 299, -1000, 516, 88, 468, 364,
	260, 490, 408, -1000, 499, 468, 468, -1000, -1000, 32,
	-1000, -1000, 138, 299, -1000, -28, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 480, 321, 239, -1000, -1000, 321,
	226, 244, 322, 319, 29, -1000, -1000, -1000, -1000, -1000,
	107, 468, -1000, 275, 499, 499, 468, 420, -1000, 455,
	126, 298, -1000, 139, 139, 50, 50, 50, -1000, -1000,
	499, -1000, -1000, 14, 377, 13, -78, 76, -1000, 408,
	480, 321, 490, 474, 477, 193, 468, 299, 384, -1000,
	-1000, 381, -1000, -1000, 202, 275, -1000, 496, 360, 360,
	-1000, -1000, 180, 165, 222, 221, 218, 20, -1000, 361,
	143, 335, -1000, 468, 241, 499, -1000, 468, -1000, 9,
	-1000, -1000, 23, -1000, 499, 84, 122, 216, 474, -1000,
	499, 499, -1000, -1000, -1000, -1000, 494, 476, 244, 112,
	-1000, 217, -1000, 198, -1000, -1000, -1000, -1000, -10, -19,
	-20, -1000, -1000, -1000, 499, 468, -1000, -1000, 468, 499,
	-1000, 430, -1000, -1000, 345, 237, -1000, 285, -1000, 490,
	408, 499, 408, -1000, -1000, 274, 273, 259, 468, 468,
	428, 499, 499, 499, -1000, -1000, -1000, 474, 193, 224,
	193, 299, 299, 299, 512, 468, 468, -1000, 373, -1,
	-1000, -3, -8, 321, -1000, 509, 63, -1000, 299, -1000,
	-1000, 202, -1000, 299, -1000, 299, -1000,
}
var yyPgo = [...]int{

	0, 624, 623, 15, 622, 621, 601, 600, 599, 596,
	595, 594, 528, 593, 592, 591, 262, 590, 17, 28,
	589, 588, 587, 586, 11, 585, 583, 22, 582, 2,
	18, 4, 581, 580, 21, 579, 6, 19, 7, 578,
	577, 8, 576, 13, 575, 572, 12, 571, 570, 569,
	568, 10, 567, 14, 566, 3, 565, 20, 563, 5,
	1, 23, 154, 562, 560, 559, 558, 554, 0, 9,
	553, 548, 538, 537, 534, 526, 525, 524, 522,
}
var yyR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 4, 4, 74, 74, 5, 6, 7, 7, 7,
	71, 71, 72, 73, 75, 75, 76, 77, 8, 8,
	8, 9, 9, 9, 10, 11, 11, 11, 78, 12,
	13, 13, 14, 14, 14, 14, 14, 15, 15, 18,
	18, 19, 19, 19, 22, 22, 20, 20, 20, 23,
	23, 24, 24, 24, 24, 21, 21, 21, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 26, 26, 26,
	27, 27, 28, 28, 28, 28, 29, 29, 30, 30,
	31, 31, 31, 31, 31, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 33, 33, 33, 33, 33,
	33, 33, 34, 34, 39, 39, 37, 37, 41, 38,
	38, 36, 36, 36, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 17,
	17, 40, 40, 42, 42, 42, 44, 47, 47, 45,
	45, 46, 48, 48, 43, 43, 43, 35, 35, 35,
	35, 49, 49, 50, 50, 51, 51, 52, 52, 53,
	54, 54, 54, 55, 55, 55, 55, 56, 56, 56,
	57, 57, 58, 58, 59, 59, 60, 60, 61, 61,
	62, 62, 63, 63, 16, 16, 64, 64, 64, 64,
	64, 65, 65, 66, 66, 67, 67, 68, 69, 70,
	70,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 12,
	3, 8, 8, 6, 6, 8, 7, 3, 4, 6,
	1, 2, 1, 1, 4, 2, 2, 4, 5, 8,
	4, 6, 7, 4, 5, 4, 5, 5, 0, 2,
	0, 2, 1, 2, 1, 1, 1, 0, 1, 1,
	3, 1, 2, 3, 1, 1, 0, 1, 2, 1,
	3, 3, 3, 3, 5, 0, 1, 2, 1, 1,
	2, 3, 2, 3, 2, 2, 2, 1, 3, 1,
	1, 3, 0, 5, 5, 5, 1, 3, 0, 2,
	1, 3, 3, 2, 3, 3, 3, 4, 3, 4,
	5, 6, 3, 4, 2, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 1, 3, 3, 1, 3, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 4, 5, 4, 1, 2, 0,
	3, 1, 1, 1, 1, 1, 5, 0, 1, 1,
	2, 4, 0, 2, 1, 3, 5, 1, 1, 1,
	1, 0, 3, 0, 2, 0, 3, 1, 3, 2,
	0, 1, 1, 0, 2, 4, 4, 0, 2, 4,
	0, 3, 1, 3, 0, 5, 1, 3, 3, 3,
	0, 2, 0, 3, 0, 1, 1, 1, 1, 1,
	1, 0, 1, 0, 1, 0, 2, 1, 0, 0,
	1,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -5, -6, -7, -8, -9,
	-10, -11, -71, -72, -73, -74, -75, -76, -77, 5,
	6, 7, 8, 29, 94, 95, 97, 96, 83, 84,
	86, 87, 89, 90, 51, 106, -14, 38, 39, 40,
	41, -12, -78, -12, -12, -12, -12, 98, -66, 100,
	104, -16, 100, 102, 98, 98, 99, 100, 85, -12,
	-27, 91, 31, -68, 31, -12, -3, 17, -15, 18,
	-13, -16, -27, 9, -60, 88, -61, -43, -68, 31,
	-63, 103, 99, -68, 98, -68, 31, -62, 103, -68,
	-62, 25, -57, 36, 80, -70, 98, -18, -19, 76,
	-22, 31, -31, -36, -32, 56, 36, -35, -43, -37,
	-42, -68, -40, -44, 28, 20, 32, 33, 34, 21,
	-41, 74, 75, 37, 103, 24, 58, 35, 25, 29,
	-27, 42, -36, 36, 62, 80, 31, 56, -68, -69,
	31, -69, 101, 31, 20, 53, -68, -27, -34, 24,
	-3, -58, -43, 31, -27, 9, 42, -20, -68, 19,
	80, 55, 54, -33, 71, 56, 70, 57, 69, 73,
	72, 79, 74, 75, 76, 77, 78, 62, 63, 64,
	65, 66, 67, 68, -31, -36, -31, -38, -3, -36,
	-36, 36, 36, -17, 36, -41, 36, -47, -36, -27,
	-60, -30, 10, -61, 93, -36, -36, 53, -68, 31,
	-69, 20, -67, 105, -64, 97, 95, 28, 96, 13,
	31, 31, 31, -69, -57, 29, -39, -37, 107, 42,
	-23, -24, -26, 36, 31, -41, -19, -68, 76, -31,
	-31, -36, -37, 71, 70, 57, -36, -36, 21, 56,
	-36, -36, -36, -36, -36, -36, -36, -36, 107, 107,
	42, 107, 107, -18, 18, -18, -68, -45, -46, 59,
	-57, 29, -30, -51, 13, -31, -36, 80, 53, -68,
	-69, -65, 101, -34, -60, 42, -43, -30, 42, -25,
	43, 44, 45, 46, 47, 49, 50, -21, 31, 19,
	-24, 80, -37, -36, -36, 55, 21, -36, 107, -18,
	107, 107, -48, -46, 61, -31, -34, -60, -51, -55,
	15, 14, -68, 31, 31, -37, -49, 11, -24, -24,
	43, 48, 43, 48, 43, 43, 43, -28, 51, 102,
	52, 31, 107, 31, 55, -36, 107, 82, -36, 60,
	-59, 53, -59, -55, -36, -52, -53, -36, -69, -50,
	12, 14, 53, 43, 43, 99, 99, 99, -36, -36,
	26, 42, 92, 42, -54, 22, 23, -51, -31, -38,
	-31, 36, 36, 36, 27, -36, -36, -53, -55, -29,
	-68, -29, -29, 7, -56, 16, 30, 107, 42, 107,
	107, -60, 7, 71, -68, -68, -68,
}
var yyDef = [...]int{

	0, -2, 1, 2, 3, 4, 5, 6, 7, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 48,
	48, 48, 48, 48, 213, 204, 0, 0, 30, 0,
	32, 33, 48, 0, 0, 48, 0, 52, 54, 55,
	56, 57, 50, 204, 0, 0, 0, 202, 0, 0,
	214, 0, 0, 205, 0, 200, 0, 200, 31, 0,
	190, 35, 90, 36, 217, 219, 20, 53, 0, 58,
	49, 0, 0, 0, 27, 0, 196, 0, 164, 217,
	0, 0, 0, 218, 0, 218, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 220, 18, 59, 61,
	66, 217, 64, 65, 100, 0, 0, 131, 132, 133,
	0, 164, 0, 147, 149, 0, 167, 168, 169, 170,
	127, 153, 154, 155, 151, 152, 157, 51, 0, 0,
	98, 0, 28, 0, 0, 0, 218, 0, 215, 40,
	0, 43, 0, 45, 201, 0, 218, 190, 34, 0,
	123, 0, 192, 91, 37, 0, 0, 62, 67, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 115, 116, 117,
	118, 119, 120, 121, 103, 0, 0, 0, 0, 129,
	142, 0, 0, 148, 0, 114, 0, 0, 158, 190,
	98, 175, 0, 197, 0, 129, 198, 199, 165, 217,
	38, 203, 0, 0, 218, 211, 206, 207, 208, 209,
	210, 44, 46, 47, 0, 0, 122, 124, 191, 0,
	98, 69, 75, 0, 87, 89, 60, 68, 63, 101,
	102, 105, 106, 0, 0, 0, 108, 0, 112, 0,
	134, 135, 136, 137, 138, 139, 140, 141, 104, 126,
	0, 128, 143, 0, 0, 0, 0, 162, 159, 0,
	0, 0, 175, 183, 0, 99, 29, 0, 0, 216,
	41, 0, 212, 23, 24, 0, 193, 171, 0, 0,
	78, 79, 0, 0, 0, 0, 0, 92, 76, 0,
	0, 0, 107, 109, 0, 0, 113, 130, 144, 0,
	146, 150, 0, 160, 0, 0, 194, 194, 183, 26,
	0, 0, 166, 218, 42, 125, 173, 0, 70, 73,
	80, 0, 82, 0, 84, 85, 86, 71, 0, 0,
	0, 77, 72, 88, 0, 110, 145, 156, 163, 0,
	21, 0, 22, 25, 184, 176, 177, 180, 39, 175,
	0, 0, 0, 81, 83, 0, 0, 0, 111, 161,
	0, 0, 0, 0, 179, 181, 182, 183, 174, 172,
	74, 0, 0, 0, 0, 185, 186, 178, 187, 0,
	96, 0, 0, 0, 19, 0, 0, 93, 0, 94,
	95, 195, 188, 0, 97, 0, 189,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 78, 73, 3,
	36, 107, 76, 74, 42, 75, 80, 77, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	63, 62, 64, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 79, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 72, 3, 37,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 38, 39, 40, 41, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 65, 66, 67,
	68, 69, 70, 71, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 91, 92, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:193
		{
			SetParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:199
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:220
		{
			yyVAL.selStmt = &SimpleSelect{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs}
		}
	case 19:
		yyDollar = yyS[yypt-12 : yypt+1]
//line ./sqlparser/sql.y:224
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Distinct: yyDollar[3].str, SelectExprs: yyDollar[4].selectExprs, From: yyDollar[6].tableExprs, Where: NewWhere(AST_WHERE, yyDollar[7].boolExpr), GroupBy: GroupBy(yyDollar[8].valExprs), Having: NewWhere(AST_HAVING, yyDollar[9].boolExpr), OrderBy: yyDollar[10].orderBy, Limit: yyDollar[11].limit, Lock: yyDollar[12].str}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:228
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt}
		}
	case 21:
		yyDollar = yyS[yypt-8 : yypt+1]
//line ./sqlparser/sql.y:235
		{
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: yyDollar[6].columns, Rows: yyDollar[7].insRows, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 22:
		yyDollar = yyS[yypt-8 : yypt+1]
//line ./sqlparser/sql.y:239
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[7].updateExprs))
			for _, col := range yyDollar[7].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Insert{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[5].tableName, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ./sqlparser/sql.y:251
		{
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: yyDollar[5].columns, Rows: yyDollar[6].insRows}
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ./sqlparser/sql.y:255
		{
			cols := make(Columns, 0, len(yyDollar[6].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[6].updateExprs))
			for _, col := range yyDollar[6].updateExprs {
				cols = append(cols, &NonStarExpr{Expr: col.Name})
				vals = append(vals, col.Expr)
			}
			yyVAL.statement = &Replace{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Columns: cols, Rows: Values{vals}}
		}
	case 25:
		yyDollar = yyS[yypt-8 : yypt+1]
//line ./sqlparser/sql.y:268
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[3].tableName, Exprs: yyDollar[5].updateExprs, Where: NewWhere(AST_WHERE, yyDollar[6].boolExpr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 26:
		yyDollar = yyS[yypt-7 : yypt+1]
//line ./sqlparser/sql.y:274
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Table: yyDollar[4].tableName, Where: NewWhere(AST_WHERE, yyDollar[5].boolExpr), OrderBy: yyDollar[6].orderBy, Limit: yyDollar[7].limit}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:280
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].updateExprs}
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:284
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: UpdateExprs{&UpdateExpr{Name: &ColName{Name: []byte("names")}, Expr: yyDollar[4].valExpr}}}
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ./sqlparser/sql.y:288
		{
			yyVAL.statement = &Set{
				Comments: Comments(yyDollar[2].bytes2),
				Exprs: UpdateExprs{
					&UpdateExpr{
						Name: &ColName{Name: []byte("names")}, Expr: yyDollar[4].valExpr,
					},
					&UpdateExpr{
						Name: &ColName{Name: []byte("collate")}, Expr: yyDollar[6].valExpr,
					},
				},
			}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:304
		{
			yyVAL.statement = &Begin{}
		}
	case 31:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:308
		{
			yyVAL.statement = &Begin{}
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:315
		{
			yyVAL.statement = &Commit{}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:321
		{
			yyVAL.statement = &Rollback{}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:327
		{
			yyVAL.statement = &Admin{Region: yyDollar[2].tableName, Columns: yyDollar[3].columns, Rows: yyDollar[4].insRows}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:331
		{
			yyVAL.statement = &AdminHelp{}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:337
		{
			yyVAL.statement = &UseDB{DB: string(yyDollar[2].bytes)}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:343
		{
			yyVAL.statement = &Truncate{Comments: Comments(yyDollar[2].bytes2), TableOpt: yyDollar[3].str, Table: yyDollar[4].tableName}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:349
		{
			yyVAL.statement = &DDL{Action: AST_CREATE, NewName: yyDollar[4].bytes}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line ./sqlparser/sql.y:353
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AST_ALTER, Table: yyDollar[7].bytes, NewName: yyDollar[7].bytes}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:358
		{
			yyVAL.statement = &DDL{Action: AST_CREATE, NewName: yyDollar[3].bytes}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ./sqlparser/sql.y:364
		{
			yyVAL.statement = &DDL{Action: AST_ALTER, Ignore: yyDollar[2].str, Table: yyDollar[4].bytes, NewName: yyDollar[4].bytes}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line ./sqlparser/sql.y:368
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: AST_RENAME, Ignore: yyDollar[2].str, Table: yyDollar[4].bytes, NewName: yyDollar[7].bytes}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:373
		{
			yyVAL.statement = &DDL{Action: AST_ALTER, Table: yyDollar[3].bytes, NewName: yyDollar[3].bytes}
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:379
		{
			yyVAL.statement = &DDL{Action: AST_RENAME, Table: yyDollar[3].bytes, NewName: yyDollar[5].bytes}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:385
		{
			yyVAL.statement = &DDL{Action: AST_DROP, Table: yyDollar[4].bytes}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:389
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AST_ALTER, Table: yyDollar[5].bytes, NewName: yyDollar[5].bytes}
		}
	case 47:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:394
		{
			yyVAL.statement = &DDL{Action: AST_DROP, Table: yyDollar[4].bytes}
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:399
		{
			SetAllowComments(yylex, true)
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:403
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			SetAllowComments(yylex, false)
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:409
		{
			yyVAL.bytes2 = nil
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:413
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:419
		{
			yyVAL.str = AST_UNION
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:423
		{
			yyVAL.str = AST_UNION_ALL
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:427
		{
			yyVAL.str = AST_SET_MINUS
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:431
		{
			yyVAL.str = AST_EXCEPT
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:435
		{
			yyVAL.str = AST_INTERSECT
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:440
		{
			yyVAL.str = ""
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:444
		{
			yyVAL.str = AST_DISTINCT
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:450
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:454
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:460
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:464
		{
			yyVAL.selectExpr = &NonStarExpr{Expr: yyDollar[1].expr, As: yyDollar[2].bytes}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:468
		{
			yyVAL.selectExpr = &StarExpr{TableName: yyDollar[1].bytes}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:474
		{
			yyVAL.expr = yyDollar[1].boolExpr
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:478
		{
			yyVAL.expr = yyDollar[1].valExpr
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:483
		{
			yyVAL.bytes = nil
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:487
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:491
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:497
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:501
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:507
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].smTableExpr, As: yyDollar[2].bytes, Hints: yyDollar[3].indexHints}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:511
		{
			yyVAL.tableExpr = &ParenTableExpr{Expr: yyDollar[2].tableExpr}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:515
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:519
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, On: yyDollar[5].boolExpr}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:524
		{
			yyVAL.bytes = nil
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:528
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:532
		{
			yyVAL.bytes = yyDollar[2].bytes
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:538
		{
			yyVAL.str = AST_JOIN
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:542
		{
			yyVAL.str = AST_STRAIGHT_JOIN
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:546
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:550
		{
			yyVAL.str = AST_LEFT_JOIN
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:554
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:558
		{
			yyVAL.str = AST_RIGHT_JOIN
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:562
		{
			yyVAL.str = AST_JOIN
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:566
		{
			yyVAL.str = AST_CROSS_JOIN
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:570
		{
			yyVAL.str = AST_NATURAL_JOIN
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:576
		{
			yyVAL.smTableExpr = &TableName{Name: yyDollar[1].bytes}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:580
		{
			yyVAL.smTableExpr = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:584
		{
			yyVAL.smTableExpr = yyDollar[1].subquery
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:590
		{
			yyVAL.tableName = &TableName{Name: yyDollar[1].bytes}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:594
		{
			yyVAL.tableName = &TableName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:599
		{
			yyVAL.indexHints = nil
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:603
		{
			yyVAL.indexHints = &IndexHints{Type: AST_USE, Indexes: yyDollar[4].bytes2}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:607
		{
			yyVAL.indexHints = &IndexHints{Type: AST_IGNORE, Indexes: yyDollar[4].bytes2}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:611
		{
			yyVAL.indexHints = &IndexHints{Type: AST_FORCE, Indexes: yyDollar[4].bytes2}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:617
		{
			yyVAL.bytes2 = [][]byte{yyDollar[1].bytes}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:621
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[3].bytes)
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:626
		{
			yyVAL.boolExpr = nil
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:630
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:637
		{
			yyVAL.boolExpr = &AndExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:641
		{
			yyVAL.boolExpr = &OrExpr{Left: yyDollar[1].boolExpr, Right: yyDollar[3].boolExpr}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:645
		{
			yyVAL.boolExpr = &NotExpr{Expr: yyDollar[2].boolExpr}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:649
		{
			yyVAL.boolExpr = &ParenBoolExpr{Expr: yyDollar[2].boolExpr}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:655
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: yyDollar[2].str, Right: yyDollar[3].valExpr}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:659
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_IN, Right: yyDollar[3].tuple}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:663
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_IN, Right: yyDollar[4].tuple}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:667
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_LIKE, Right: yyDollar[3].valExpr}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:671
		{
			yyVAL.boolExpr = &ComparisonExpr{Left: yyDollar[1].valExpr, Operator: AST_NOT_LIKE, Right: yyDollar[4].valExpr}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:675
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_BETWEEN, From: yyDollar[3].valExpr, To: yyDollar[5].valExpr}
		}
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line ./sqlparser/sql.y:679
		{
			yyVAL.boolExpr = &RangeCond{Left: yyDollar[1].valExpr, Operator: AST_NOT_BETWEEN, From: yyDollar[4].valExpr, To: yyDollar[6].valExpr}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:683
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NULL, Expr: yyDollar[1].valExpr}
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:687
		{
			yyVAL.boolExpr = &NullCheck{Operator: AST_IS_NOT_NULL, Expr: yyDollar[1].valExpr}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:691
		{
			yyVAL.boolExpr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:697
		{
			yyVAL.str = AST_EQ
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:701
		{
			yyVAL.str = AST_LT
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:705
		{
			yyVAL.str = AST_GT
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:709
		{
			yyVAL.str = AST_LE
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:713
		{
			yyVAL.str = AST_GE
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:717
		{
			yyVAL.str = AST_NE
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:721
		{
			yyVAL.str = AST_NSE
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:727
		{
			yyVAL.insRows = yyDollar[2].values
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:731
		{
			yyVAL.insRows = yyDollar[1].selStmt
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:737
		{
			yyVAL.values = Values{yyDollar[1].tuple}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:741
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].tuple)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:747
		{
			yyVAL.tuple = ValTuple(yyDollar[2].valExprs)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:751
		{
			yyVAL.tuple = yyDollar[1].subquery
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:757
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:763
		{
			yyVAL.valExprs = ValExprs{yyDollar[1].valExpr}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:767
		{
			yyVAL.valExprs = append(yyDollar[1].valExprs, yyDollar[3].valExpr)
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:773
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:777
		{
			yyVAL.valExpr = yyDollar[1].colName
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:781
		{
			yyVAL.valExpr = yyDollar[1].tuple
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:785
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITAND, Right: yyDollar[3].valExpr}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:789
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITOR, Right: yyDollar[3].valExpr}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:793
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_BITXOR, Right: yyDollar[3].valExpr}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:797
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_PLUS, Right: yyDollar[3].valExpr}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:801
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MINUS, Right: yyDollar[3].valExpr}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:805
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MULT, Right: yyDollar[3].valExpr}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:809
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_DIV, Right: yyDollar[3].valExpr}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:813
		{
			yyVAL.valExpr = &BinaryExpr{Left: yyDollar[1].valExpr, Operator: AST_MOD, Right: yyDollar[3].valExpr}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:817
		{
			if num, ok := yyDollar[2].valExpr.(NumVal); ok {
				switch yyDollar[1].byt {
				case '-':
					yyVAL.valExpr = append(NumVal("-"), num...)
				case '+':
					yyVAL.valExpr = num
				default:
					yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
				}
			} else {
				yyVAL.valExpr = &UnaryExpr{Operator: yyDollar[1].byt, Expr: yyDollar[2].valExpr}
			}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:832
		{
			yyVAL.valExpr = &FuncExpr{Name: yyDollar[1].bytes}
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:836
		{
			yyVAL.valExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].selectExprs}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:840
		{
			yyVAL.valExpr = &FuncExpr{Name: yyDollar[1].bytes, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:844
		{
			yyVAL.valExpr = &FuncExpr{Name: yyDollar[1].bytes, Exprs: yyDollar[3].selectExprs}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:848
		{
			yyVAL.valExpr = yyDollar[1].caseExpr
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:852
		{
			yyVAL.valExpr = &DefaultExpr{Name: &ColName{Name: []byte(yyDollar[2].str)}}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:857
		{
			yyVAL.str = ""
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:861
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:868
		{
			yyVAL.bytes = IF_BYTES
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:872
		{
			yyVAL.bytes = VALUES_BYTES
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:878
		{
			yyVAL.byt = AST_UPLUS
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:882
		{
			yyVAL.byt = AST_UMINUS
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:886
		{
			yyVAL.byt = AST_TILDA
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:892
		{
			yyVAL.caseExpr = &CaseExpr{Expr: yyDollar[2].valExpr, Whens: yyDollar[3].whens, Else: yyDollar[4].valExpr}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:897
		{
			yyVAL.valExpr = nil
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:901
		{
			yyVAL.valExpr = yyDollar[1].valExpr
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:907
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:911
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:917
		{
			yyVAL.when = &When{Cond: yyDollar[2].boolExpr, Val: yyDollar[4].valExpr}
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:922
		{
			yyVAL.valExpr = nil
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:926
		{
			yyVAL.valExpr = yyDollar[2].valExpr
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:932
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].bytes}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:936
		{
			yyVAL.colName = &ColName{Qualifier: yyDollar[1].bytes, Name: yyDollar[3].bytes}
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:940
		{
			yyVAL.colName = &ColName{Qualifier: yyDollar[3].bytes, Name: yyDollar[5].bytes}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:946
		{
			yyVAL.valExpr = StrVal(yyDollar[1].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:950
		{
			yyVAL.valExpr = NumVal(yyDollar[1].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:954
		{
			yyVAL.valExpr = ValArg(yyDollar[1].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:958
		{
			yyVAL.valExpr = &NullVal{}
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:963
		{
			yyVAL.valExprs = nil
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:967
		{
			yyVAL.valExprs = yyDollar[3].valExprs
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:972
		{
			yyVAL.boolExpr = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:976
		{
			yyVAL.boolExpr = yyDollar[2].boolExpr
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:981
		{
			yyVAL.orderBy = nil
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:985
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:991
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:995
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:1001
		{
			yyVAL.order = &Order{Expr: yyDollar[1].valExpr, Direction: yyDollar[2].str}
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1006
		{
			yyVAL.str = AST_ASC
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1010
		{
			yyVAL.str = AST_ASC
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1014
		{
			yyVAL.str = AST_DESC
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1019
		{
			yyVAL.limit = nil
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:1023
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].valExpr}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:1027
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].valExpr, Rowcount: yyDollar[4].valExpr}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:1031
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].valExpr, Rowcount: yyDollar[2].valExpr}
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1036
		{
			yyVAL.str = ""
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:1040
		{
			yyVAL.str = AST_FOR_UPDATE
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line ./sqlparser/sql.y:1044
		{
			if !bytes.Equal(yyDollar[3].bytes, SHARE) {
				yylex.Error("expecting share")
				return 1
			}
			if !bytes.Equal(yyDollar[4].bytes, MODE) {
				yylex.Error("expecting mode")
				return 1
			}
			yyVAL.str = AST_SHARE_MODE
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1057
		{
			yyVAL.columns = nil
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:1061
		{
			yyVAL.columns = yyDollar[2].columns
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1067
		{
			yyVAL.columns = Columns{&NonStarExpr{Expr: yyDollar[1].colName}}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:1071
		{
			yyVAL.columns = append(yyVAL.columns, &NonStarExpr{Expr: yyDollar[3].colName})
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1076
		{
			yyVAL.updateExprs = nil
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line ./sqlparser/sql.y:1080
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1086
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:1090
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:1096
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].valExpr}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:1100
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: StrVal("ON")}
		}
	case 200:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1105
		{
			yyVAL.empty = struct{}{}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:1107
		{
			yyVAL.empty = struct{}{}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1110
		{
			yyVAL.empty = struct{}{}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line ./sqlparser/sql.y:1112
		{
			yyVAL.empty = struct{}{}
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1115
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1117
		{
			yyVAL.str = AST_IGNORE
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1121
		{
			yyVAL.empty = struct{}{}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1123
		{
			yyVAL.empty = struct{}{}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1125
		{
			yyVAL.empty = struct{}{}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1127
		{
			yyVAL.empty = struct{}{}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1129
		{
			yyVAL.empty = struct{}{}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1132
		{
			yyVAL.empty = struct{}{}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1134
		{
			yyVAL.empty = struct{}{}
		}
	case 213:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1137
		{
			yyVAL.empty = struct{}{}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1139
		{
			yyVAL.empty = struct{}{}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1142
		{
			yyVAL.empty = struct{}{}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line ./sqlparser/sql.y:1144
		{
			yyVAL.empty = struct{}{}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1148
		{
			yyVAL.bytes = bytes.ToLower(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1153
		{
			ForceEOF(yylex)
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line ./sqlparser/sql.y:1158
		{
			yyVAL.str = ""
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line ./sqlparser/sql.y:1162
		{
			yyVAL.str = AST_TABLE
		}
	}
	goto yystack /* stack new state and value */
}
